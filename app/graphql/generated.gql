fragment MyWallets on ConsumerAccount {
  wallets {
    id
    balance
    walletCurrency
  }
}

fragment Transaction on Transaction {
  __typename
  id
  status
  direction
  memo
  createdAt
  settlementAmount
  settlementFee
  settlementCurrency
  settlementPrice {
    base
    offset
    currencyUnit
    formattedAmount
  }
  initiationVia {
    __typename
    ... on InitiationViaIntraLedger {
      counterPartyWalletId
      counterPartyUsername
    }
    ... on InitiationViaLn {
      paymentHash
    }
    ... on InitiationViaOnChain {
      address
    }
  }
  settlementVia {
    __typename
    ... on SettlementViaIntraLedger {
      counterPartyWalletId
      counterPartyUsername
    }
    ... on SettlementViaLn {
      paymentSecret
    }
    ... on SettlementViaOnChain {
      transactionHash
    }
  }
}

fragment TransactionList on TransactionConnection {
  pageInfo {
    hasNextPage
    hasPreviousPage
    startCursor
    endCursor
  }
  edges {
    cursor
    node {
      ...Transaction
    }
  }
}

fragment Me on User {
  id
  language
  username
  phone
  defaultAccount {
    id
    defaultWalletId
    transactions(first: $recentTransactions) {
      ...TransactionList
    }
    wallets {
      id
      balance
      walletCurrency
    }
  }
}

query HideBalance {
  hideBalance @client
}

query HiddenBalanceToolTip {
  hiddenBalanceToolTip @client
}

mutation captchaCreateChallenge {
  captchaCreateChallenge {
    errors {
      __typename
      message
    }
    result {
      __typename
      id
      challengeCode
      newCaptcha
      failbackMode
    }
  }
}

mutation userContactUpdateAlias($input: UserContactUpdateAliasInput!) {
  userContactUpdateAlias(input: $input) {
    errors {
      __typename
      message
    }
  }
}

mutation deviceNotificationTokenCreate($input: DeviceNotificationTokenCreateInput!) {
  deviceNotificationTokenCreate(input: $input) {
    errors {
      __typename
      message
    }
    success
  }
}

mutation intraLedgerPaymentSend($input: IntraLedgerPaymentSendInput!) {
  intraLedgerPaymentSend(input: $input) {
    errors {
      __typename
      message
    }
    status
  }
}

mutation intraLedgerUsdPaymentSend($input: IntraLedgerUsdPaymentSendInput!) {
  intraLedgerUsdPaymentSend(input: $input) {
    errors {
      __typename
      message
    }
    status
  }
}

mutation userQuizQuestionUpdateCompleted($input: UserQuizQuestionUpdateCompletedInput!) {
  userQuizQuestionUpdateCompleted(input: $input) {
    errors {
      __typename
      message
    }
    userQuizQuestion {
      question {
        id
        earnAmount
      }
      completed
    }
  }
}

mutation userUpdateUsername($input: UserUpdateUsernameInput!) {
  userUpdateUsername(input: $input) {
    errors {
      __typename
      message
    }
    user {
      __typename
      id
      username
    }
  }
}

mutation captchaRequestAuthCode($input: CaptchaRequestAuthCodeInput!) {
  captchaRequestAuthCode(input: $input) {
    errors {
      __typename
      message
    }
    success
  }
}

mutation lnNoAmountInvoiceFeeProbe($input: LnNoAmountInvoiceFeeProbeInput!) {
  lnNoAmountInvoiceFeeProbe(input: $input) {
    errors {
      __typename
      message
    }
    amount
  }
}

mutation lnInvoiceFeeProbe($input: LnInvoiceFeeProbeInput!) {
  lnInvoiceFeeProbe(input: $input) {
    errors {
      __typename
      message
    }
    amount
  }
}

mutation lnUsdInvoiceFeeProbe($input: LnUsdInvoiceFeeProbeInput!) {
  lnUsdInvoiceFeeProbe(input: $input) {
    errors {
      __typename
      message
    }
    amount
  }
}

mutation lnNoAmountUsdInvoiceFeeProbe($input: LnNoAmountUsdInvoiceFeeProbeInput!) {
  lnNoAmountUsdInvoiceFeeProbe(input: $input) {
    errors {
      __typename
      message
    }
    amount
  }
}

mutation userLogin($input: UserLoginInput!) {
  userLogin(input: $input) {
    errors {
      __typename
      message
    }
    authToken
  }
}

mutation lnNoAmountInvoicePaymentSend($input: LnNoAmountInvoicePaymentInput!) {
  lnNoAmountInvoicePaymentSend(input: $input) {
    errors {
      __typename
      message
    }
    status
  }
}

mutation lnInvoicePaymentSend($input: LnInvoicePaymentInput!) {
  lnInvoicePaymentSend(input: $input) {
    errors {
      __typename
      message
    }
    status
  }
}

mutation lnNoAmountUsdInvoicePaymentSend($input: LnNoAmountUsdInvoicePaymentInput!) {
  lnNoAmountUsdInvoicePaymentSend(input: $input) {
    errors {
      __typename
      message
    }
    status
  }
}

mutation onChainPaymentSend($input: OnChainPaymentSendInput!) {
  onChainPaymentSend(input: $input) {
    errors {
      __typename
      message
    }
    status
  }
}

query transactionListForContact($username: Username!, $first: Int, $after: String, $last: Int, $before: String) {
  me {
    id
    contactByUsername(username: $username) {
      transactions(first: $first, after: $after, last: $last, before: $before) {
        ...TransactionList
      }
    }
  }
}

query contacts {
  me {
    contacts {
      id
      username
      alias
      transactionsCount
    }
  }
}

query transactionListForDefaultAccount($first: Int, $after: String, $last: Int, $before: String) {
  me {
    id
    defaultAccount {
      id
      transactions(first: $first, after: $after, last: $last, before: $before) {
        ...TransactionList
      }
    }
  }
}

query onChainTxFee($walletId: WalletId!, $address: OnChainAddress!, $amount: SatAmount!, $targetConfirmations: TargetConfirmations) {
  onChainTxFee(
    walletId: $walletId
    address: $address
    amount: $amount
    targetConfirmations: $targetConfirmations
  ) {
    amount
    targetConfirmations
  }
}

query btcPriceList($range: PriceGraphRange!) {
  btcPriceList(range: $range) {
    timestamp
    price {
      base
      offset
      currencyUnit
      formattedAmount
    }
  }
}

query accountLimits {
  me {
    defaultAccount {
      limits {
        withdrawal {
          totalLimit
          remainingLimit
          interval
        }
        internalSend {
          totalLimit
          remainingLimit
          interval
        }
        convert {
          totalLimit
          remainingLimit
          interval
        }
      }
    }
  }
}

query userDefaultWalletId($username: Username!) {
  userDefaultWalletId(username: $username)
}

query mainQuery($hasToken: Boolean!) {
  globals {
    nodesIds
    network
  }
  quizQuestions {
    id
    earnAmount
  }
  btcPrice {
    base
    offset
    currencyUnit
    formattedAmount
  }
  me @include(if: $hasToken) {
    id
    language
    username
    phone
    quizQuestions {
      question {
        id
        earnAmount
      }
      completed
    }
    defaultAccount {
      id
      defaultWalletId
      transactions(first: 3) {
        ...TransactionList
      }
      wallets {
        id
        balance
        walletCurrency
      }
    }
  }
  mobileVersions {
    platform
    currentSupported
    minSupported
  }
}

query businessMapMarkers {
  businessMapMarkers {
    username
    mapInfo {
      title
      coordinates {
        longitude
        latitude
      }
    }
  }
}

query initWallet {
  me {
    id
    defaultAccount {
      id
      defaultWalletId
      wallets {
        id
        balance
        walletCurrency
      }
    }
  }
}

query wallets {
  me {
    defaultAccount {
      wallets {
        walletCurrency
        id
      }
    }
  }
}

subscription price($input: PriceInput!) {
  price(input: $input) {
    price {
      base
      offset
      currencyUnit
      formattedAmount
    }
    errors {
      message
    }
  }
}

subscription myUpdates {
  myUpdates {
    errors {
      message
    }
    update {
      type: __typename
      ... on Price {
        base
        offset
        currencyUnit
        formattedAmount
      }
      ... on LnUpdate {
        paymentHash
        status
      }
      ... on OnChainUpdate {
        txNotificationType
        txHash
        amount
        usdPerSat
      }
      ... on IntraLedgerUpdate {
        txNotificationType
        amount
        usdPerSat
      }
    }
  }
}

query rootStack($hasToken: Boolean!) {
  me @include(if: $hasToken) {
    username
    id
  }
  globals {
    network
  }
}

query conversionScreen {
  me {
    defaultAccount {
      usdWallet @client {
        id
        balance
      }
      btcWallet @client {
        id
        balance
      }
    }
  }
}

query addressScreen {
  me {
    username
  }
}

mutation accountUpdateDefaultWalletId($input: AccountUpdateDefaultWalletIdInput!) {
  accountUpdateDefaultWalletId(input: $input) {
    errors {
      __typename
      message
    }
    account {
      __typename
      id
      defaultWalletId
    }
  }
}

query setDefaultWallet {
  me {
    defaultAccount {
      id
      defaultWalletId
      btcWallet {
        id
      }
      usdWallet {
        id
      }
    }
  }
}

query receiveBitcoinScreen {
  me {
    defaultAccount {
      defaultWallet {
        walletCurrency
      }
      usdWallet {
        id
      }
    }
  }
}

query receiveBtc {
  me {
    defaultAccount {
      btcWallet {
        id
      }
    }
  }
}

mutation lnNoAmountInvoiceCreate($input: LnNoAmountInvoiceCreateInput!) {
  lnNoAmountInvoiceCreate(input: $input) {
    errors {
      __typename
      message
    }
    invoice {
      __typename
      paymentHash
      paymentRequest
      paymentSecret
    }
  }
}

mutation lnInvoiceCreate($input: LnInvoiceCreateInput!) {
  lnInvoiceCreate(input: $input) {
    errors {
      __typename
      message
    }
    invoice {
      __typename
      paymentHash
      paymentRequest
      paymentSecret
      satoshis
    }
  }
}

mutation onChainAddressCurrent($input: OnChainAddressCurrentInput!) {
  onChainAddressCurrent(input: $input) {
    errors {
      __typename
      message
    }
    address
  }
}

query receiveUsd {
  globals {
    network
  }
  me {
    defaultAccount {
      usdWallet {
        id
      }
    }
  }
}

mutation lnUsdInvoiceCreate($input: LnUsdInvoiceCreateInput!) {
  lnUsdInvoiceCreate(input: $input) {
    errors {
      __typename
      message
    }
    invoice {
      __typename
      paymentHash
      paymentRequest
      paymentSecret
      satoshis
    }
  }
}

query sendBitcoinDestination {
  globals {
    nodesIds
    network
  }
  me {
    username
    contacts {
      id
      username
      alias
      transactionsCount
    }
  }
}

query sendBitcoinDetailsScreen {
  globals {
    network
  }
  me {
    defaultAccount {
      defaultWallet {
        id
        walletCurrency
      }
      btcWallet {
        id
        balance
        walletCurrency
        accountId
        pendingIncomingBalance
      }
      usdWallet {
        id
        balance
        walletCurrency
        accountId
        pendingIncomingBalance
      }
    }
  }
}

query AccountScreen {
  me {
    phone
  }
}

query languageScreen {
  me {
    language
    id
  }
}

mutation userUpdateLanguage($input: UserUpdateLanguageInput!) {
  userUpdateLanguage(input: $input) {
    errors {
      __typename
      message
    }
    user {
      __typename
      id
      language
    }
  }
}

query walletCSVTransactions($defaultWalletId: WalletId!) {
  me {
    id
    defaultAccount {
      id
      csvTransactions(walletIds: [$defaultWalletId])
    }
  }
}

query SettingsScreen {
  me {
    phone
    username
    language
    defaultAccount {
      btcWallet {
        id
      }
    }
  }
}

query LocalizationContextProvider {
  me {
    language
  }
}

