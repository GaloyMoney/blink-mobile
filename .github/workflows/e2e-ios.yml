name: iOS E2E Tests

on:
  pull_request:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  e2e-test:
    runs-on: macos-13
    steps:
      - uses: actions/checkout@v4

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@v14

      - name: Run the Magic Nix Cache
        uses: DeterminateSystems/magic-nix-cache-action@v8

      - name: List available simulators
        run: xcrun simctl list devices available

      - name: Set up Docker
        uses: douglascamata/setup-docker-macos-action@v1-alpha

      - name: Cache Node Modules
        uses: actions/cache@v4
        id: node-cache
        with:
          path: |
            node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Cache Pods
        uses: actions/cache@v4
        with:
          path: ios/Pods
          key: ${{ runner.os }}-pods-${{ hashFiles('**/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pods-

      - name: Cache iOS Build
        uses: actions/cache@v4
        with:
          path: |
            ios/build
            ~/Library/Developer/Xcode/DerivedData
          key: ${{ runner.os }}-ios-build-${{ hashFiles('ios/**/*.pbxproj') }}-${{ hashFiles('ios/**/*.xcconfig') }}
          restore-keys: |
            ${{ runner.os }}-ios-build-

      - name: Install dependencies
        run: nix develop -c yarn install

      - name: Build E2E tests
        run: nix develop -c yarn e2e:build ios.sim.debug

      - name: Create iOS Simulator
        run: |
          DEVICE_ID=$(xcrun simctl create "iPhone SE (3rd generation)" com.apple.CoreSimulator.SimDeviceType.iPhone-SE-3rd-generation com.apple.CoreSimulator.SimRuntime.iOS-17-2)
          echo "DEVICE_ID=$DEVICE_ID" >> $GITHUB_ENV

      - name: Boot Simulator
        run: xcrun simctl boot $DEVICE_ID

      - name: Start Metro, Tilt, Emulator, and run tests
        id: run-tests
        run: |
          # Create directory for PID files
          mkdir -p /tmp/pids

          # Start Tilt in background
          nix develop -c tilt up -f ./dev/Tiltfile &
          echo $! > /tmp/pids/tilt.pid

          # Start Metro in background
          nix develop -c yarn start &
          echo $! > /tmp/pids/metro.pid

          sleep 5

          # Wait for galoy UI resource to be ready (timeout after 5 minutes)
          nix develop -c tilt wait --for=condition=Ready "uiresource/galoy" --timeout=5m

          # Wait for device to be ready
          while ! xcrun simctl list devices | grep "(Booted)"; do
            sleep 5
            echo "Waiting for Simulator device to come online..."
          done

          # Start screen recording
          rm -rf ios-recordings || true
          xcrun simctl io booted recordVideo screenRecord.mov &
          echo $! > /tmp/pids/sim_record.pid

          # Trigger dev setup and run tests
          nix develop -c tilt trigger dev-setup
          nix develop -c tilt wait --for=condition=Ready "uiresource/dev-setup" --timeout=5m

          # Run the E2E tests
          nix develop -c yarn e2e:test ios.sim.debug -d -R 5 --take-screenshots all --record-videos all --record-logs all --artifacts-location ios-recordings
          TEST_EXIT_CODE=$?

          exit $TEST_EXIT_CODE

      - name: Cleanup Processes
        if: always()
        run: |
          # Function to kill process by PID file
          kill_process() {
            local pidfile=$1
            if [ -f "$pidfile" ]; then
              PID=$(cat "$pidfile")
              if ps -p $PID > /dev/null; then
                echo "Killing process $(basename "$pidfile" .pid) (PID: $PID)"
                kill $PID || kill -9 $PID
              fi
              rm "$pidfile"
            fi
          }

          # Kill all processes
          for pidfile in /tmp/pids/*.pid; do
            [ -f "$pidfile" ] && kill_process "$pidfile"
          done

          # Additional cleanup commands just to be thorough
          nix develop -c tilt down -f ./dev/Tiltfile
          pkill -f "node.*metro" || true
          pkill -f "tilt" || true

      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-artifacts
          path: |
            ios-recordings/
            ios-recordings/screenRecord.mov
