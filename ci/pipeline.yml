#@ load("@ytt:data", "data")

#@ def pipeline_image():
#@   return data.values.docker_registry + "/galoy-mobile-pipeline"
#@ end

#@ def nodejs_pipeline_image():
#@   return data.values.docker_registry + "/nodejs-concourse"
#@ end

#@ def task_image_config():
type: registry-image
source:
  username: #@ data.values.docker_registry_user
  password: #@ data.values.docker_registry_password
  repository: #@ pipeline_image()
#@ end

#@ def release_pipeline_image():
#@   return data.values.docker_registry + "/release-pipeline"
#@ end

#@ def release_task_image_config():
type: registry-image
source:
  username: #@ data.values.docker_registry_user
  password: #@ data.values.docker_registry_password
  repository: #@ release_pipeline_image()
#@ end

#@ def build_task_image_config():
type: registry-image
source:
  username: #@ data.values.docker_registry_user
  password: #@ data.values.docker_registry_password
  repository: #@ nodejs_pipeline_image()
#@ end

groups:
- name: development
  jobs:
  - test-unit
  - check-code
  - install-deps
  - release-cron
  - release-manual
  - dev-build-android
  - dev-build-ios
- name: e2e-builds
  jobs:
  - e2e-test-android
  - e2e-test-ios
  - prerelease
  - prod-build-android
  - prod-build-ios
- name: stores
  jobs:
  - upload-to-play-store
  - upload-to-app-store
  - upload-to-huawei-store
#!  - make-release
- name: image
  jobs:
  - build-pipeline-image

jobs:
- name: install-deps
  plan:
  - in_parallel:
    - { get: deps, trigger: true }
    - { get: pipeline-tasks }
    - { put: deps-version, params: { bump: patch } }
  - task: install-deps
    config:
      platform: linux
      image_resource: #@ task_image_config()
      inputs:
      - name: pipeline-tasks
      - name: deps
      - name: deps-version
      outputs:
      - name: bundled-deps
      run:
        path: pipeline-tasks/ci/tasks/install-deps.sh
  - put: bundled-deps
    params:
      file: bundled-deps/bundled-deps-*.tgz

- name: test-unit
  plan:
  - in_parallel:
    - { get: repo, trigger: true }
    - { get: bundled-deps, trigger: true }
    - get: pipeline-tasks
  - task: test-unit
    config:
      platform: linux
      image_resource: #@ task_image_config()
      inputs:
      - name: bundled-deps
      - name: pipeline-tasks
      - name: repo
      run:
        path: pipeline-tasks/ci/tasks/test-unit.sh

- name: check-code
  plan:
  - in_parallel:
    - { get: repo, trigger: true }
    - { get: bundled-deps, trigger: true }
    - get: pipeline-tasks
  - task: test-unit
    config:
      platform: linux
      image_resource: #@ task_image_config()
      inputs:
      - name: bundled-deps
      - name: pipeline-tasks
      - name: repo
      run:
        path: pipeline-tasks/ci/tasks/check-code.sh

- name: release-cron
  plan:
  - in_parallel:
    - get: daily-release
      trigger: true
    - get: repo
      passed:
      - test-unit
      - check-code
    - get: pipeline-tasks
    - get: version
  - task: prep-release
    config:
      platform: linux
      image_resource: #@ release_task_image_config()
      inputs:
      - name: repo
      - name: pipeline-tasks
      - name: version
      outputs:
      - name: version
      - name: artifacts
      run:
        path: pipeline-tasks/ci/tasks/vendor/prep-release-src.sh
  - in_parallel:
    - put: gh-release
      params:
        name: artifacts/gh-release-name
        tag: artifacts/gh-release-tag
        body: artifacts/gh-release-notes.md
    - put: version
      params:
        file: version/version

- name: release-manual
  plan:
  - in_parallel:
    - get: repo
      passed:
      - test-unit
      - check-code
    - get: pipeline-tasks
    - get: version
  - task: prep-release
    config:
      platform: linux
      image_resource: #@ release_task_image_config()
      inputs:
      - name: repo
      - name: pipeline-tasks
      - name: version
      outputs:
      - name: version
      - name: artifacts
      run:
        path: pipeline-tasks/ci/tasks/vendor/prep-release-src.sh
  - in_parallel:
    - put: gh-release
      params:
        name: artifacts/gh-release-name
        tag: artifacts/gh-release-tag
        body: artifacts/gh-release-notes.md
    - put: version
      params:
        file: version/version

- name: dev-build-android
  plan:
  - in_parallel:
    - get: repo
      trigger: true
      passed:
      - test-unit
      - check-code
    - { get: bundled-deps }
    - get: pipeline-tasks
  - task: build
    config:
      platform: linux
      image_resource: #@ build_task_image_config()
      inputs:
      - name: repo
      - name: pipeline-tasks
      run:
        path: pipeline-tasks/ci/tasks/dev-build-android.sh
      params:
        CIRCLECI_TOKEN: #@ data.values.circleci_token

- name: dev-build-ios
  plan:
  - in_parallel:
    - get: repo
      trigger: true
      passed:
      - test-unit
      - check-code
    - { get: bundled-deps }
    - get: pipeline-tasks
  - task: build
    config:
      platform: linux
      image_resource: #@ build_task_image_config()
      inputs:
      - name: repo
      - name: pipeline-tasks
      run:
        path: pipeline-tasks/ci/tasks/dev-build-ios.sh
      params:
        CIRCLECI_TOKEN: #@ data.values.circleci_token

- name: e2e-test-android
  plan:
  - in_parallel:
    - get: dev-android-build
      trigger: true
    - get: repo
    - get: bundled-deps
    - get: pipeline-tasks
  - task: e2e-test
    config:
      platform: linux
      image_resource: #@ build_task_image_config()
      inputs:
      - name: repo
      - name: bundled-deps
      - name: dev-android-build
      - name: pipeline-tasks
      run:
        path: pipeline-tasks/ci/tasks/e2e-test-android.sh
      params:
        BROWSERSTACK_USER: #@ data.values.browserstack_user
        BROWSERSTACK_ACCESS_KEY: #@ data.values.browserstack_access_key
        GALOY_TEST_TOKENS: #@ data.values.galoy_test_tokens
        GALOY_TOKEN_2: #@ data.values.galoy_token_2

- name: e2e-test-ios
  plan:
  - in_parallel:
    - get: dev-ios-build
      trigger: true
    - get: repo
    - get: bundled-deps
    - get: pipeline-tasks
  - task: e2e-test
    config:
      platform: linux
      image_resource: #@ build_task_image_config()
      inputs:
      - name: repo
      - name: bundled-deps
      - name: dev-ios-build
      - name: pipeline-tasks
      run:
        path: pipeline-tasks/ci/tasks/e2e-test-ios.sh
      params:
        CIRCLECI_TOKEN: #@ data.values.circleci_token
        BUILD_ARTIFACTS_BUCKET_CREDS: #@ data.values.build_artifacts_bucket_creds
        BROWSERSTACK_USER: #@ data.values.browserstack_user
        BROWSERSTACK_ACCESS_KEY: #@ data.values.browserstack_access_key
        GALOY_TEST_TOKENS: #@ data.values.galoy_test_tokens
        GALOY_TOKEN_2: #@ data.values.galoy_token_2

- name: prerelease
  plan:
  - in_parallel:
    - get: daily
      trigger: true
    - get: repo
      passed:
      - e2e-test-android
      - e2e-test-ios
    - get: pipeline-tasks
    - get: version
  - task: prep-release
    config:
      platform: linux
      image_resource: #@ release_task_image_config()
      inputs:
      - name: repo
      - name: pipeline-tasks
      - name: version
      outputs:
      - name: version
      - name: artifacts
      run:
        path: pipeline-tasks/ci/tasks/vendor/prep-release-src.sh
  - in_parallel:
    - put: gh-release
      params:
        name: artifacts/gh-release-name
        tag: artifacts/gh-release-tag
        body: artifacts/gh-release-notes.md
    - put: version
      params:
        file: version/version

- name: prod-build-android
  plan:
  - in_parallel:
    - get: version
      passed: [ "prerelease" ]
      trigger: true
    - get: pipeline-tasks
  - task: build
    config:
      platform: linux
      image_resource: #@ build_task_image_config()
      inputs:
      - name: repo
      - name: pipeline-tasks
      run:
        path: pipeline-tasks/ci/tasks/prod-build-android.sh

- name: prod-build-ios
  plan:
  - in_parallel:
    - get: version
      passed: [ "prerelease" ]
      trigger: true
    - get: pipeline-tasks
  - task: build
    config:
      platform: linux
      image_resource: #@ build_task_image_config()
      inputs:
      - name: repo
      - name: pipeline-tasks
      run:
        path: pipeline-tasks/ci/tasks/prod-build-ios.sh

- name: upload-to-play-store
  plan:
  - in_parallel:
    - get: prod-android-build
      trigger: true
    - get: pipeline-tasks
  - task: build
    config:
      platform: linux
      image_resource: #@ build_task_image_config()
      inputs:
      - name: prod-android-build
      - name: pipeline-tasks
      run:
        path: pipeline-tasks/ci/tasks/upload-to-play-store.sh
    

- name: upload-to-app-store
  plan:
  - in_parallel:
    - get: prod-ios-build
      trigger: true
    - get: pipeline-tasks
  - task: build
    config:
      platform: linux
      image_resource: #@ build_task_image_config()
      inputs:
      - name: prod-ios-build
      - name: pipeline-tasks
      run:
        path: pipeline-tasks/ci/tasks/upload-to-app-store.sh
    

- name: upload-to-huawei-store
  plan:
  - in_parallel:
    - get: prod-android-build
      trigger: true
    - get: pipeline-tasks
  - task: build
    config:
      platform: linux
      image_resource: #@ build_task_image_config()
      inputs:
      - name: prod-android-build
      - name: pipeline-tasks
      run:
        path: pipeline-tasks/ci/tasks/upload-to-huawei-store.sh

- name: build-pipeline-image
  serial: true
  plan:
  - get: pipeline-image-def
    trigger: true
  - task: build
    privileged: true
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: vito/oci-build-task
      inputs:
      - name: pipeline-image-def
      outputs:
      - name: image
      params:
        CONTEXT: pipeline-image-def/ci/image
      run:
        path: build
  - put: pipeline-image
    params:
      image: image/image.tar

resources:
- name: repo
  type: git
  source:
    ignore_paths: [ "ci/*" ]
    uri: #@ data.values.git_uri
    branch: #@ data.values.git_branch
    private_key: #@ data.values.github_private_key

- name: pipeline-tasks
  type: git
  source:
    paths: [ "ci/*" ]
    uri: #@ data.values.git_uri
    branch: #@ data.values.pipeline_git_branch
    private_key: #@ data.values.github_private_key

- name: deps
  type: git
  source:
    paths: [ yarn.lock ]
    uri: #@ data.values.git_uri
    branch: #@ data.values.git_branch
    private_key: #@ data.values.github_private_key

- name: bundled-deps
  type: gcs-resource
  source:
    bucket: #@ data.values.artifacts_bucket_name
    json_key: #@ data.values.staging_inception_creds
    regexp: galoy-mobile-artifacts/deps/bundled-deps-v(.*)-.*.tgz

- name: dev-android-build
  type: gcs-resource
  source:
    bucket: #@ data.values.build_artifacts_bucket_name
    json_key: #@ data.values.build_artifacts_bucket_creds
    regexp: galoy-build-artifacts/android/galoy-mobile-v(.*)/.*

- name: dev-ios-build
  type: gcs-resource
  source:
    bucket: #@ data.values.build_artifacts_bucket_name
    json_key: #@ data.values.build_artifacts_bucket_creds
    regexp: galoy-build-artifacts/ios/galoy-mobile-v(.*)/.*

- name: prod-android-build
  type: gcs-resource
  source:
    bucket: #@ data.values.build_artifacts_bucket_name
    json_key: #@ data.values.build_artifacts_bucket_creds
    regexp: galoy-build-artifacts/android/galoy-mobile-prod-v(.*)/.*

- name: prod-ios-build
  type: gcs-resource
  source:
    bucket: #@ data.values.build_artifacts_bucket_name
    json_key: #@ data.values.build_artifacts_bucket_creds
    regexp: galoy-build-artifacts/ios/galoy-mobile-prod-v(.*)/.*

- name: deps-version
  type: semver
  source:
    initial_version: 0.1.0
    driver: gcs
    bucket: #@ data.values.artifacts_bucket_name
    key: galoy-mobile-artifacts/versions/deps
    json_key: #@ data.values.staging_inception_creds

- name: pipeline-image
  type: registry-image
  source:
    tag: latest
    username: #@ data.values.docker_registry_user
    password: #@ data.values.docker_registry_password
    repository: #@ pipeline_image()

- name: pipeline-image-def
  type: git
  source:
    paths: [ci/image/Dockerfile]
    uri: #@ data.values.git_uri
    branch: #@ data.values.git_branch
    private_key: #@ data.values.github_private_key

- name: daily
  type: time
  source:
    day_of_week: 1-6
    start: 6:00 AM
    stop: 6:00 AM
    location: UTC

- name: gh-release
  type: github-release
  source:
    owner: #@ data.values.gh_org
    repository: #@ data.values.gh_repository
    access_token: #@ data.values.github_api_token
    pre_release: true

- name: version
  type: semver
  source:
    initial_version: 0.0.0
    driver: git
    file: version
    uri: #@ data.values.git_uri
    branch: #@ data.values.git_version_branch
    private_key: #@ data.values.github_private_key

resource_types:
- name: gcs-resource
  type: docker-image
  source:
    repository: frodenas/gcs-resource
