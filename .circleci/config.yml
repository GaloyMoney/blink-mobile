version: 2.1
orbs:
  gcp-gke: circleci/gcp-gke@1.0.3
  helm: circleci/helm@0.2.3
  gcp-gcr: circleci/gcp-gcr@0.7.1
  slack: circleci/slack@3.4.2
jobs:
  react-native:
    working_directory: ~/GaloyApp/mobile
    docker:
      - image: circleci/node:10
    steps:
      - checkout:
          path: ~/GaloyApp

      - restore_cache:
          key: yarn-v1-{{ checksum "yarn.lock" }}-{{ arch }}

      - restore_cache:
          key: node-v1-{{ checksum "package.json" }}-{{ arch }}

      - run: yarn install

      - save_cache:
          key: yarn-v1-{{ checksum "yarn.lock" }}-{{ arch }}
          paths:
            - ~/.cache/yarn

      - save_cache:
          key: node-v1-{{ checksum "package.json" }}-{{ arch }}
          paths:
            - node_modules

      - run:
          name: jest tests
          command: |
            mkdir -p test-results/jest
            yarn run test
          environment:
            JEST_JUNIT_OUTPUT: test-results/jest/junit.xml

      - persist_to_workspace:
          root: ~/GaloyApp/mobile
          paths:
            - node_modules

      - store_test_results:
          path: test-results

      - store_artifacts:
          path: test-results

  android:
    working_directory: ~/GaloyApp/mobile/android
    docker:
      - image: circleci/android:api-27-node8-alpha
    steps:
      - checkout:
          path: ~/GaloyApp/mobile

      - attach_workspace:
          at: ~/GaloyApp/mobile

      - restore_cache:
          key: bundle-v1-{{ checksum "Gemfile.lock" }}-{{ arch }}

      - run: bundle install

      - save_cache:
          key: bundle-v1-{{ checksum "Gemfile.lock" }}-{{ arch }}
          paths:
            - vendor/bundle

      - run:
          name: fastlane tests
          command: |
            mkdir -p test-results/fastlane
            bundle exec fastlane test
            mv fastlane/report.xml test-results/fastlane
      - store_test_results:
          path: test-results

      - store_artifacts:
          path: test-results

  ios:
    macos:
      xcode: "9.0"
    working_directory: ~/GaloyApp/mobile

    # use a --login shell so our "set Ruby version" command gets picked up for later steps
    shell: /bin/bash --login -o pipefail

    steps:
      - checkout

      - run:
          name: set Ruby version
          command:  echo "ruby-2.4" > ~/.ruby-version

      - restore_cache:
          key: yarn-v1-{{ checksum "yarn.lock" }}-{{ arch }}

      - restore_cache:
          key: node-v1-{{ checksum "package.json" }}-{{ arch }}

      # not using a workspace here as Node and Yarn versions
      # differ between our macOS executor image and the Docker containers above
      - run: yarn install

      - save_cache:
          key: yarn-v1-{{ checksum "yarn.lock" }}-{{ arch }}
          paths:
            - ~/.cache/yarn

      - save_cache:
          key: node-v1-{{ checksum "package.json" }}-{{ arch }}
          paths:
            - node_modules

      - restore_cache:
          key: bundle-v1-{{ checksum "ios/Gemfile.lock" }}-{{ arch }}

      - run:
          command: bundle install
          working_directory: ios

      - save_cache:
          key: bundle-v1-{{ checksum "ios/Gemfile.lock" }}-{{ arch }}
          paths:
            - vendor/bundle

      - run:
          command: bundle exec fastlane test
          working_directory: ios

      - run:
          name: set up test results
          working_directory: ios
          when: always
          command: |
            mkdir -p test-results/fastlane test-results/xcode
            mv fastlane/report.xml test-results/fastlane
            mv fastlane/test_output/report.junit test-results/xcode/junit.xml
      - store_test_results:
          path: ios/test-results

      - store_artifacts:
          path: ios/test-results

  build_ios:
    macos:
      xcode: 11.6.0
    working_directory: ~/GaloyApp/mobile
    environment:
      FL_OUTPUT_DIR: output
    shell: /bin/bash --login -o pipefail
    steps:
      - checkout:
          path: ~/GaloyApp
      - add_ssh_keys:
          fingerprints:
            - "f6:4b:18:f4:33:f0:8f:46:47:42:9b:16:44:15:98:67"
      - restore_cache:
          key: 1-gem-{{ checksum "ios/Gemfile.lock" }}
      - run: cd ios && bundle config set deployment 'true'
      - run: cd ios && bundle check || bundle install 
      - save_cache:
          key: 1-gem-{{ checksum "ios/Gemfile.lock" }}
          paths:
            - ios/vendor
      - restore_cache:
          key: 1-yarn-{{ checksum "yarn.lock" }}-pod1-{{ checksum "ios/Podfile.lock" }}
      - run: yarn install
      - run: git diff "ios/Podfile.lock" | cat
      - save_cache:
          key: 1-yarn-{{ checksum "yarn.lock" }}-pod1-{{ checksum "ios/Podfile.lock" }}
          paths:
            - node_modules
            - ios/Pods
      - run: yarn jest
      - run: 
         name: fastlane
         command: cd ios && bundle exec fastlane beta
         no_output_timeout: 15m
      - run: git config credential.helper 'cache --timeout=120'
      - run: git config --global user.name "circleci-bot"
      - run: git config --global user.email "bot@circleci.com"
      - run: git config pull.rebase false
      - run: git pull https://${GITHUB_TOKEN}@github.com/nicolasburtey/galoy-app.git $CIRCLE_BRANCH
      - run: git commit -a -m "new ios build [ci skip]"
      - run: git push -q https://${GITHUB_TOKEN}@github.com/nicolasburtey/galoy-app.git $CIRCLE_BRANCH
      - store_artifacts:
          path: ios/output
      - store_test_results:
          path: ios/output/scan

  build_android:
    docker:
      - image: circleci/android:api-29
    environment:
      TERM: dumb
      _JAVA_OPTIONS: "-Xmx2048m -XX:+UnlockExperimentalVMOptions"
      GRADLE_OPTS: '-Dorg.gradle.jvmargs="-Xmx2048m"'
    working_directory: ~/GaloyApp/mobile
    shell: /bin/bash --login -o pipefail
    steps:
      - checkout:
          path: ~/GaloyApp
      - run: sudo apt-get update
      - run: sudo apt-get install gnupg2
      - run: curl -sL https://deb.nodesource.com/setup_12.x | sudo -E bash -
      - run: sudo apt-get install -y nodejs
      - run: sudo apt-get install gcc g++ make
      - run: sudo npm install -g yarn
      - run: gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB
      - run: curl -sL https://get.rvm.io | bash -s stable --ruby
      - run: source /home/circleci/.rvm/scripts/rvm
      - run: rvm install 2.4.1
      - run: rvm use 2.4.1 --default
      - run: gem install fastlane -NV
      
      - run: cd android && bundle config set deployment 'true'
      - run: cd android && bundle check || bundle install 

      - run: echo $ANDROID_SERVICE_ACCOUNT_UPLOAD | base64 -d > android/api-8350101450647692243-59029-b9bec84a7e5a.json
      - run: echo $RELEASE_KEYSTORE | base64 -d > android/release.keystore
      - run: echo $RELEASE_KEYSTORE | base64 -d > android/app/release.keystore

      - run: node -v
      - run: npm -v
      - run: ruby -v
      - run: fastlane -v
      - run: yarn -v
      
      - run: yarn install
      - run: yarn jest
      - run: cd android && fastlane android beta

      - run: git config credential.helper 'cache --timeout=120'
      - run: git config --global user.name "circleci-bot"
      - run: git config --global user.email "bot@circleci.com"
      - run: git config pull.rebase false
      - run: git pull origin $CIRCLE_BRANCH
      - run: git commit -a -m "new android build [ci skip]"
      - run: git push -q https://${GITHUB_TOKEN}@github.com/nicolasburtey/galoy-app.git $CIRCLE_BRANCH

  build_test_image:
    working_directory: ~/GaloyApp/backend/firebase
    machine: true
    steps:
      - checkout:
          path: ~/GaloyApp
      - run:
          name: Write build params to docker image source
          command: |
            echo "COMMITHASH=$CIRCLE_SHA1" >> ./functions/.env
            echo "BUILDTIME=$(date -u '+%F-%T')" >> ./functions/.env
      - gcp-gcr/build-image:
          image: test-image
          tag: $CIRCLE_SHA1
      - gcp-gcr/gcr-auth
      - gcp-gcr/push-image:
          image: test-image
          tag: $CIRCLE_SHA1
          
  test:
    working_directory: ~/GaloyApp/backend
    docker:
      - image: kiwigrid/gcloud-kubectl-helm:latest
    resource_class: small
    steps:
      - checkout:
          path: ~/GaloyApp
      - run:
          name: generate and export namespace name
          command: |
            echo "export NAMESPACE=devnet-$CIRCLE_SHA1" >> $BASH_ENV
      - run:
          name: authorize gcloud and kubectl on circleci and create namespace
          command: |
            echo ${GCLOUD_SERVICE_KEY} > gcloud-service-key.json
            gcloud auth activate-service-account --key-file=gcloud-service-key.json
            gcloud config set project ${GOOGLE_PROJECT_ID}
            gcloud container clusters get-credentials testnet-cluster --region us-central1-a --project ${GOOGLE_PROJECT_ID}
            kubectl create namespace $NAMESPACE
      - run:
          name: helm add repo bitnami
          command: helm repo add bitnami https://charts.bitnami.com/bitnami
      - run:
          name: install helm charts
          command: |
            cd ~/GaloyApp/backend/firebase/functions/ && ./initLocalTest.sh            
      - run:
          name: Run jest test
          command: |
            kubectl exec --namespace=$NAMESPACE test-pod -- bash -c "cd functions && yarn test"
      - run:
          name: Run postman test
          command: |
            kubectl exec --namespace=$NAMESPACE test-pod -- bash -c "cd functions && yarn run postman"
      - run:
          name: Fetch test results
          command: kubectl cp --namespace=$NAMESPACE test-pod:/functions/artifacts/junit.xml ./reports/junit.xml
          when: always
      # - run:
      #     name: sleep
      #     command: sleep 590 && echo "10 min" && sleep 590 && echo "20 min" && sleep 590 && echo "30 min"
      #     when: always
      - store_test_results:
          path: ./reports
      - store_artifacts:
          path: ./reports
      - run:
          name: Delete devnet namespace
          command: |
            kubectl delete namespaces $NAMESPACE
          when: always
      - when:
          condition:
            equal: [ master, << pipeline.git.branch >> ]
          steps:
            - run: |
                gcloud container clusters get-credentials testnet-cluster --region us-central1-a --project ${GOOGLE_PROJECT_ID}
                cd ~/GaloyApp/backend/firebase/functions/ && ./initLocalTest.sh testnet            

  mainnet_deploy:
    working_directory: ~/GaloyApp/backend
    docker:
      - image: kiwigrid/gcloud-kubectl-helm:latest     
    resource_class: small
    steps:
      - checkout:
          path: ~/GaloyApp
      - run:
          name: Authenticate on gcloud
          command: |
            echo ${GCLOUD_SERVICE_KEY} > gcloud-service-key.json
            gcloud auth activate-service-account --key-file=gcloud-service-key.json
            gcloud config set project ${GOOGLE_PROJECT_ID}
            gcloud container clusters get-credentials testnet-cluster --region us-central1-a --project ${GOOGLE_PROJECT_ID}
      - run:
          name: Upgrade mainnet deployments
          command: |
            cd ~/GaloyApp/backend/firebase/functions/ && ./initLocalTest.sh mainnet
               
  update_locale:
    working_directory: ~/GaloyApp/mobile
    docker:
      - image: cimg/base:2020.01    
    resource_class: small
    steps:
      - checkout:
          path: ~/GaloyApp
      - run: echo $PHRASE_CONFIG | base64 -d > .phrase.yml
      - run: wget https://github.com/phrase/phrase-cli/releases/download/2.0.13/phrase_linux_amd64
      - run: chmod +x ./phrase_linux_amd64
      - run: ./phrase_linux_amd64 push
      - run: ./phrase_linux_amd64 pull
      - run: git config credential.helper 'cache --timeout=120'
      - run: git config --global user.name "circleci-bot"
      - run: git config --global user.email "bot@circleci.com"
      - run: git config pull.rebase false
      - run: |
          if [[ $(git diff) ]]; then
            git commit -a -m "update translation file [ci skip]"
            git push -q https://${GITHUB_TOKEN}@github.com/nicolasburtey/galoy-app.git $CIRCLE_BRANCH
          else
            echo "nothing to commit"
          fi

workflows:
  kube:
    jobs:
      - build_test_image
      - test:
          requires:
            - build_test_image
      - approve_mainnet_deploy:
          type: approval
          requires:
            - test
          filters:
            branches:
              only:
                - master
      - slack/approval-notification:
          mentions: 'U011J7RCEFQ,U011KKL1L4B'
          requires:
            - test
          filters:
            branches:
              only:
                - master
      - mainnet_deploy:
          requires:
            - approve_mainnet_deploy
          filters:
            branches:
              only:
                - master
  mobile:
    jobs:
      - hold_build_mobile:
          type: approval
      - update_locale:
          requires:
            - hold_build_mobile
      - build_ios:
          requires:
            - update_locale
      - build_android:
          requires:
            - update_locale