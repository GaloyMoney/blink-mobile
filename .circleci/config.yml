version: 2.1
orbs:
  gcp-gke: circleci/gcp-gke@1.0.3
  helm: circleci/helm@0.2.3
  gcp-gcr: circleci/gcp-gcr@0.7.1
  slack: circleci/slack@3.4.2
jobs:
  react-native:
    working_directory: ~/GaloyApp/mobile
    docker:
      - image: circleci/node:10
    steps:
      - checkout:
          path: ~/GaloyApp

      - restore_cache:
          key: yarn-v1-{{ checksum "yarn.lock" }}-{{ arch }}

      - restore_cache:
          key: node-v1-{{ checksum "package.json" }}-{{ arch }}

      - run: yarn install

      - save_cache:
          key: yarn-v1-{{ checksum "yarn.lock" }}-{{ arch }}
          paths:
            - ~/.cache/yarn

      - save_cache:
          key: node-v1-{{ checksum "package.json" }}-{{ arch }}
          paths:
            - node_modules

      - run:
          name: jest tests
          command: |
            mkdir -p test-results/jest
            yarn run test
          environment:
            JEST_JUNIT_OUTPUT: test-results/jest/junit.xml

      - persist_to_workspace:
          root: ~/GaloyApp/mobile
          paths:
            - node_modules

      - store_test_results:
          path: test-results

      - store_artifacts:
          path: test-results

  android:
    working_directory: ~/GaloyApp/mobile/android
    docker:
      - image: circleci/android:api-27-node8-alpha
    steps:
      - checkout:
          path: ~/GaloyApp/mobile

      - attach_workspace:
          at: ~/GaloyApp/mobile

      - restore_cache:
          key: bundle-v1-{{ checksum "Gemfile.lock" }}-{{ arch }}

      - run: bundle install

      - save_cache:
          key: bundle-v1-{{ checksum "Gemfile.lock" }}-{{ arch }}
          paths:
            - vendor/bundle

      - run:
          name: fastlane tests
          command: |
            mkdir -p test-results/fastlane
            bundle exec fastlane test
            mv fastlane/report.xml test-results/fastlane
      - store_test_results:
          path: test-results

      - store_artifacts:
          path: test-results

  ios:
    macos:
      xcode: "9.0"
    working_directory: ~/GaloyApp/mobile

    # use a --login shell so our "set Ruby version" command gets picked up for later steps
    shell: /bin/bash --login -o pipefail

    steps:
      - checkout

      - run:
          name: set Ruby version
          command:  echo "ruby-2.4" > ~/.ruby-version

      - restore_cache:
          key: yarn-v1-{{ checksum "yarn.lock" }}-{{ arch }}

      - restore_cache:
          key: node-v1-{{ checksum "package.json" }}-{{ arch }}

      # not using a workspace here as Node and Yarn versions
      # differ between our macOS executor image and the Docker containers above
      - run: yarn install

      - save_cache:
          key: yarn-v1-{{ checksum "yarn.lock" }}-{{ arch }}
          paths:
            - ~/.cache/yarn

      - save_cache:
          key: node-v1-{{ checksum "package.json" }}-{{ arch }}
          paths:
            - node_modules

      - restore_cache:
          key: bundle-v1-{{ checksum "ios/Gemfile.lock" }}-{{ arch }}

      - run:
          command: bundle install
          working_directory: ios

      - save_cache:
          key: bundle-v1-{{ checksum "ios/Gemfile.lock" }}-{{ arch }}
          paths:
            - vendor/bundle

      - run:
          command: bundle exec fastlane test
          working_directory: ios

      - run:
          name: set up test results
          working_directory: ios
          when: always
          command: |
            mkdir -p test-results/fastlane test-results/xcode
            mv fastlane/report.xml test-results/fastlane
            mv fastlane/test_output/report.junit test-results/xcode/junit.xml
      - store_test_results:
          path: ios/test-results

      - store_artifacts:
          path: ios/test-results

  build_test_image:
    working_directory: ~/GaloyApp/backend/firebase
    machine: true
    steps:
      - checkout:
          path: ~/GaloyApp
      - run:
          name: Write build params to docker image source
          command: |
            echo "COMMITHASH=$CIRCLE_SHA1" >> ./functions/.env
            echo "BUILDTIME=$(date -u '+%F-%T')" >> ./functions/.env
      - gcp-gcr/build-image:
          image: test-image
      - gcp-gcr/gcr-auth
      - gcp-gcr/push-image:
          image: test-image
          
  test:
    working_directory: ~/GaloyApp/backend
    docker:
      - image: kiwigrid/gcloud-kubectl-helm:latest
    environment:
      NAMESPACE: devnet
    steps:
      - checkout:
          path: ~/GaloyApp
      # - run:
      #     name: generate cluster name
      #     command: |
      #       echo "devnet-cluster-"$RANDOM > clustername
      #       cat clustername
      - run:
          name: authorize gcloud and kubectl on circleci and create cluster
          command: |
            echo ${GCLOUD_SERVICE_KEY} > gcloud-service-key.json
            gcloud auth activate-service-account --key-file=gcloud-service-key.json
            gcloud config set project ${GOOGLE_PROJECT_ID}
            gcloud container clusters get-credentials testnet-cluster --region us-central1-b --project ${GOOGLE_PROJECT_ID}
# gcloud container clusters create $(cat clustername | tr -d '\n\r') --region us-central1-b --num-nodes=1 \
            # --machine-type=n1-standard-2 --disk-size=10Gi
      - run:
          name: wait for k8s worker nodes
          command: echo $(ls) && sleep 30 # TODO: try to improve approach if possible
      - run:
          name: helm install bitcoind-chart
          command: |
            helm install --namespace=$NAMESPACE bitcoind-chart \
            -f ~/GaloyApp/backend/bitcoind-chart/regtest-values.yaml \
            ~/GaloyApp/backend/bitcoind-chart
      - run:
          name: helm install lnd-chart
          command: |
            helm install --namespace=$NAMESPACE lnd-chart \
            -f ~/GaloyApp/backend/lnd-chart/regtest-values.yaml \
            ~/GaloyApp/backend/lnd-chart
      - run:
          name: helm add repo bitnami
          command: helm repo add bitnami https://charts.bitnami.com/bitnami
      - run:
          name: helm install mongodb
          command: |
            helm install --namespace=$NAMESPACE mongodb --set \
            mongodbUsername=testGaloy,mongodbPassword=testGaloy,mongodbDatabase=galoy,persistence.enabled=false bitnami/mongodb
      - run:
          name: Check Helm release status
          command: helm list  --namespace=$NAMESPACE --all
      - run:
          name: wait for pod to come alive
          command: |
            kubectl wait --namespace=$NAMESPACE --for=condition=ready pod -l app=bitcoind-container --timeout=200s
            kubectl wait --namespace=$NAMESPACE --for=condition=ready pod -l app=lnd-container --timeout=200s
            kubectl wait --namespace=$NAMESPACE --for=condition=ready pod -l app=mongodb --timeout=200s
      - run:
          name: retrieve macaroons from lnd containers and install test image
          command: |
            export MACAROON=$(kubectl exec --namespace=$NAMESPACE -- lnd-container-0 -- base64 /root/.lnd/data/chain/bitcoin/regtest/admin.macaroon | tr -d '\n\r') &&\
            export MACAROONOUTSIDE1=$(kubectl exec --namespace=$NAMESPACE lnd-container-1 -- base64 /root/.lnd/data/chain/bitcoin/regtest/admin.macaroon | tr -d '\n\r') &&\
            export MACAROONOUTSIDE2=$(kubectl exec --namespace=$NAMESPACE lnd-container-2 -- base64 /root/.lnd/data/chain/bitcoin/regtest/admin.macaroon | tr -d '\n\r') &&\
            helm install --namespace=$NAMESPACE test-chart -f ~/GaloyApp/backend/test-chart/values.yaml --set \
            macaroon=$MACAROON,macaroonoutside1=$MACAROONOUTSIDE1,macaroonoutside2=$MACAROONOUTSIDE2 \
            ~/GaloyApp/backend/test-chart/
      - run:
          name: wait for test-pod to come alive
          command: |
            echo $(kubectl get --namespace=$NAMESPACE pods)
            kubectl wait --namespace=$NAMESPACE --for=condition=ready pod/test-pod --timeout=200s
      - run:
          name: Run tests
          command: |
            kubectl get --namespace=$NAMESPACE pods
            kubectl exec --namespace=$NAMESPACE test-pod -- bash -c "cd functions && yarn test"
      - run:
          name: Fetch test results
          command: kubectl cp --namespace=$NAMESPACE test-pod:/functions/artifacts/junit.xml ./reports/junit.xml
          when: always
      - store_test_results:
          path: ./reports
      - store_artifacts:
          path: ./reports
      # - run:
      #     name: Delete devnet cluster
      #     command: |
      #       gcloud container clusters delete $(cat clustername | tr -d '\n\r') --quiet --region us-central1-b
      #     when: always
      - when:
          condition:
            equal: [ master, << pipeline.git.branch >> ]
          steps:
            - run: |
                gcloud container images add-tag gcr.io/${GOOGLE_PROJECT_ID}/test-image:latest gcr.io/${GOOGLE_PROJECT_ID}/test-image:approved --quiet
                gcloud container clusters get-credentials testnet-cluster --region us-central1-a --project ${GOOGLE_PROJECT_ID}
                kubectl delete pod -l app=graphql-server
      - slack/status:
          fail_only: true
          mentions: 'U011J7RCEFQ,U011KKL1L4B'

workflows:
  kube:
    jobs:
      - build_test_image
      - test:
          requires:
            - build_test_image
