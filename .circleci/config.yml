version: 2.1

orbs:
  gh: circleci/github-cli@2.3.0
  node: circleci/node@5.2.0
  ruby: zebbra/ruby@0.0.2
  nix: eld/nix@1.1.1
  android: circleci/android@2.4.0
  rn: react-native-community/react-native@7.1.1
  docker: circleci/docker@2.4.0

commands:
  install_java:
    steps:
      - run:
          name: Install Java
          command: |
            sudo apt-get update && sudo apt-get install -y openjdk-8-jdk
            sudo update-alternatives --set java /usr/lib/jvm/java-8-openjdk-amd64/bin/java
            sudo update-alternatives --set javac /usr/lib/jvm/java-8-openjdk-amd64/bin/javac
            java -version
  install_yarn_deps:
    steps:
      - node/install:
          install-yarn: true
          node-version: '18.18.2'
      - run: yarn global add node-gyp
      - rn/yarn_install
  prepare_ruby:
    steps:
      - add_ssh_keys:
          fingerprints:
            - "19:7e:f3:6c:be:a7:17:01:7d:09:ca:39:c3:98:86:90"
      - run: brew update
      - ruby/install-bundler
      - restore_cache:
          key: 1-gem-{{ checksum "ios/Gemfile.lock" }}
      - run: cd ios && bundle config set deployment 'true'
      - run: cd ios && bundle config set --local path 'vendor/bundle'
      - run: cd ios && bundle check || bundle install
      - run: gem install cocoapods
      - save_cache:
          key: 1-gem-{{ checksum "ios/Gemfile.lock" }}
          paths:
            - ios/vendor
  metro_start:
    steps:
      - run:
          command: yarn start
          background: true
  nix-with-flake:
    steps:
      - nix/install
      - run:
          name: Set up Nix environment for Flakes
          command: |
            mkdir -p ~/.config/nix
            echo 'experimental-features = nix-command flakes' > ~/.config/nix/nix.conf
  local_backend:
    steps:
      - run:
          command: |
            nix develop -c make tilt-up
          background: true
  wait_for_backend_ready:
    steps:
      - run: nix develop -c tilt wait --timeout 1h --for=condition=Ready uiresources init-setup

parameters:
  version:
    type: string
    default: ""
  platform:
    type: string
    default: ""
  git_ref:
    type: string
    default: ""
  gcs_directory:
    type: string
    default: ""
  build_number:
    type: string
    default: ""
  task:
    type: string
    default: ""
  gcs_url:
    type: string
    default: ""

jobs:
  e2e_build_android:
    docker:
       - image: cimg/android:2022.12
    resource_class: xlarge
    environment:
      TERM: dumb
      JAVA_OPTS: -Xms512m -Xmx2g
      GRADLE_OPTS: -Xmx3g -Dorg.gradle.daemon=false -Dorg.gradle.jvmargs="-Xmx2g -XX:+HeapDumpOnOutOfMemoryError"
    working_directory: ~/galoy-mobile
    shell: /bin/bash --login -o pipefail
    steps:
      - checkout:
          path: ~/galoy-mobile
      - install_java
      - install_yarn_deps
      - run: yarn e2e:build android.emu.debug
      - persist_to_workspace:
          root: ~/galoy-mobile
          paths:
            - android/app/build
  e2e_run_android:
    environment:
      TEST_ENV: Local
    executor:
      name: android/android-machine
      resource-class: xlarge
      tag: 2023.11.1
    working_directory: ~/galoy-mobile
    steps:
      - checkout:
          path: ~/galoy-mobile
      - attach_workspace:
          at: ~/galoy-mobile
      - install_yarn_deps
      - nix-with-flake
      - local_backend
      - android/create-avd:
          avd-name: Pixel_API_29_AOSP
          install: true
          system-image: system-images;android-34;default;x86_64
      - android/start-emulator:
          avd-name: Pixel_API_29_AOSP
          no-window: true
          post-emulator-launch-assemble-command: ""
      - metro_start
      - wait_for_backend_ready
      - run: yarn e2e:test android.emu.debug -d -R 5 --take-screenshots all --record-videos all --record-logs all --headless
      - store_artifacts:
          path: artifacts

  e2e_build_ios:
    macos:
      xcode: 14.2.0
    resource_class: macos.x86.medium.gen2
    working_directory: ~/galoy-mobile
    shell: /bin/bash --login -o pipefail
    steps:
      - checkout:
          path: ~/galoy-mobile
      - prepare_ruby
      - install_yarn_deps
      - run: yarn e2e:build ios.sim.debug
      - persist_to_workspace:
          root: ~/galoy-mobile
          paths:
            - ios/build/Build/Products/Debug-iphonesimulator/Blink.app

  e2e_run_ios:
    environment:
      GALOY_STAGING_GLOBAL_OTP: 403370
    macos:
      xcode: 14.2.0
    resource_class: macos.x86.medium.gen2
    shell: /bin/bash --login -o pipefail
    working_directory: ~/galoy-mobile
    steps:
      - checkout:
          path: ~/galoy-mobile
      - run: |
          brew tap wix/brew
          brew install applesimutils
      - install_yarn_deps
      - nix-with-flake
      # - local_backend
      - rn/ios_simulator_start:
          device: iPhone SE (3rd generation)
      - run: yarn e2e:test ios.sim.debug -d -R 5 --take-screenshots all --record-videos all --record-logs all
      - store_artifacts:
          path: artifacts

  build_android:
    docker:
      - image: cimg/android:2022.12
    resource_class: xlarge
    environment:
      TERM: dumb
      JAVA_OPTS: -Xms2g -Xmx4g
      GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.jvmargs="-Xmx4g -XX:+HeapDumpOnOutOfMemoryError"
      PUBLIC_VERSION: << pipeline.parameters.version >>
      BUILD_NUMBER: << pipeline.parameters.build_number >>
      GCS_DIRECTORY: << pipeline.parameters.gcs_directory >>
    working_directory: ~/galoy-mobile
    shell: /bin/bash --login -o pipefail
    steps:
      # if workflow was triggered by github then don't run the test jobs
      - run: |
          if [ << pipeline.trigger_source >> = "webhook" ]; then
              circleci-agent step halt
          fi
      - gh/install
      - checkout:
          path: ~/galoy-mobile

      - node/install:
           install-yarn: true
           node-version: '18.18.2'

      - run: git checkout << pipeline.parameters.git_ref >>
      - run: gpg --keyserver keyserver.ubuntu.com --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB
      - run: echo $GCLOUD_BUCKET_KEY | base64 --decode > key.json
      - run: gcloud auth activate-service-account --key-file key.json

      - run: cd android && bundle config set deployment 'true'
      - run: cd android && bundle check || bundle install

      - restore_cache:
          key: 2-yarn-{{ checksum "yarn.lock" }}-android
      - run: yarn install
      - save_cache:
          key: 2-yarn-{{ checksum "yarn.lock" }}-android
          paths:
            - node_modules
      - run: echo $JAVA_OPTS
      - run: echo $GRADLE_OPTS
      - run: echo $RELEASE_KEYSTORE | base64 -d > android/app/release.keystore
      - run:
          name: build
          command: |
            cd android
            sed -i'' -e "s/versionCode .*$/versionCode $BUILD_NUMBER/g" app/build.gradle
            bundle exec fastlane android build 2>&1 | tee android_build_output.log
          no_output_timeout: 15m
      - run:
          name: upload to gcs
          command: gsutil cp -r android/app/build/outputs/* gs://galoy-build-artifacts/galoy-mobile/$GCS_DIRECTORY/galoy-mobile-$(date +%s)-v${PUBLIC_VERSION}/
      - store_artifacts:
          path: android/android_build_output.log

  build_ios:
    macos:
      xcode: 14.2.0
    resource_class: macos.x86.medium.gen2
    environment:
      PUBLIC_VERSION: << pipeline.parameters.version >>
      BUILD_NUMBER: << pipeline.parameters.build_number >>
      GCS_DIRECTORY: << pipeline.parameters.gcs_directory >>
    working_directory: ~/galoy-mobile
    shell: /bin/bash --login -o pipefail
    steps:
      # if workflow was triggered by github then don't run the test jobs
      - run: |
          if [ << pipeline.trigger_source >> = "webhook" ]; then
              circleci-agent step halt
          fi
      - gh/install
      - checkout:
          path: ~/galoy-mobile
      - run: git checkout << pipeline.parameters.git_ref >>
      - ruby/install-bundler
      - add_ssh_keys:
          fingerprints:
            - "19:7e:f3:6c:be:a7:17:01:7d:09:ca:39:c3:98:86:90"
      - run: brew update
      - run: HOMEBREW_NO_AUTO_UPDATE=1 brew install --cask google-cloud-sdk
      - run: echo $GCLOUD_BUCKET_KEY | base64 --decode > key.json
      - run: gcloud auth activate-service-account --key-file key.json
      - restore_cache:
          key: 1-gem-{{ checksum "ios/Gemfile.lock" }}
      - run: cd ios && bundle config set deployment 'true'
      - run: cd ios && bundle config set --local path 'vendor/bundle'
      - run: cd ios && bundle check || bundle install
      - run: gem install cocoapods
      - save_cache:
          key: 1-gem-{{ checksum "ios/Gemfile.lock" }}
          paths:
            - ios/vendor
      - restore_cache:
          key: 1-yarn-{{ checksum "yarn.lock" }}-pod1-{{ checksum "ios/Podfile.lock" }}
      - run: yarn install
      - save_cache:
          key: 1-yarn-{{ checksum "yarn.lock" }}-pod1-{{ checksum "ios/Podfile.lock" }}
          paths:
            - node_modules
            - ios/Pods
      - run:
          name: Import Apple Certificates
          command: |
            tmpfile=$(mktemp /tmp/wwdr-cert.cer)
            curl -f -o $tmpfile https://www.apple.com/certificateauthority/AppleWWDRCAG3.cer && security import $tmpfile ~/Library/Keychains/login.keychain-db
      - run:
          name: build
          command: |
            cd ios
            sed -i'' -e "s/MARKETING_VERSION.*/MARKETING_VERSION = $PUBLIC_VERSION;/g" GaloyApp.xcodeproj/project.pbxproj
            bundle exec fastlane build 2>&1 | tee ios_build_output.log
          no_output_timeout: 15m
      - run:
          name: upload to gcs
          command: |
            timestamp=$(date +%s)
            gsutil cp -r ~/galoy-mobile/ios/Blink.ipa gs://galoy-build-artifacts/galoy-mobile/$GCS_DIRECTORY/galoy-mobile-$timestamp-v${PUBLIC_VERSION}/
            gsutil cp -r ~/galoy-mobile/ios/Blink.app.dSYM.zip gs://galoy-build-artifacts/galoy-mobile/$GCS_DIRECTORY/galoy-mobile-$timestamp-v${PUBLIC_VERSION}/
      - store_artifacts:
          path: ios/ios_build_output.log

  upload_to_app_store:
    macos:
      xcode: 14.2.0
    resource_class: macos.x86.medium.gen2
    environment:
      GCS_URL: << pipeline.parameters.gcs_url >>
    working_directory: ~/galoy-mobile
    shell: /bin/bash --login -o pipefail
    steps:
      # if workflow was triggered by github then don't run the test jobs
      - run: |
          if [ << pipeline.trigger_source >> = "webhook" ]; then
              circleci-agent step halt
          fi
      - gh/install
      - checkout:
          path: ~/galoy-mobile
      - run: brew update
      - run: HOMEBREW_NO_AUTO_UPDATE=1 brew install --cask google-cloud-sdk
      - run: echo $GCLOUD_BUCKET_KEY | base64 --decode > key.json
      - run: gcloud auth activate-service-account --key-file key.json
      - run: git checkout << pipeline.parameters.git_ref >>
      - run: cd ios && gsutil cp -r "$GCS_URL" .
      - restore_cache:
          key: 1-gem-{{ checksum "ios/Gemfile.lock" }}
      - run: cd ios && bundle check || bundle install
      - save_cache:
          key: 1-gem-{{ checksum "ios/Gemfile.lock" }}
          paths:
            - ios/vendor
      - run:
          name: Import Apple Certificates
          command: |
            tmpfile=$(mktemp /tmp/wwdr-cert.cer)
            curl -f -o $tmpfile https://www.apple.com/certificateauthority/AppleWWDRCAG3.cer && security import $tmpfile ~/Library/Keychains/login.keychain-db
      - run: cd ios && bundle exec fastlane app_store_upload

workflows:
  build_android_and_upload_to_bucket:
    when:
      equal: [android, << pipeline.parameters.platform >>]
    jobs:
      - build_android
  build_ios_and_upload_to_bucket:
    when:
      equal: [ios, << pipeline.parameters.platform >>]
    jobs:
      - build_ios
  upload_to_app_store:
    when:
      and:
        - equal: [upload_to_app_store, << pipeline.parameters.task >>]
        - equal: ["api", << pipeline.trigger_source >>]
    jobs:
      - upload_to_app_store
  test_in_pr:
    when:
      not:
        equal: [main, << pipeline.git.branch >>]
    jobs:
      - e2e_build_android
      - e2e_run_android:
          requires:
            - e2e_build_android
      - e2e_build_ios
      - e2e_run_ios:
          requires:
            - e2e_build_ios
